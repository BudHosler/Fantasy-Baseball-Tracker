void readBinary(int, vector<Player*>&)
{
	fstream fin("binaryData.dat", ios::in | ios::binary);

	char playerType;

	while (fin.read((&playerType), sizeof(playerType))) {
		if (playerType == 'h') {
			//write name
			int len = hitter->setName().length();
			fin.write(reinterpret_cast<char*>(&len), sizeof(len));
			fin.write(hitter->setName().c_str(), len);

			//write team
			len = hitter->setTeam().length();
			fin.write(reinterpret_cast<char*>(&len), sizeof(len));
			fin.write(hitter->setTeam().c_str(), len);

			//write stats
			intputFromBinary = 
			fin.write(reinterpret_cast<char*>(&), sizeof(intputFromBinary));

			intputFromBinary = hitter->setSingles();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setDoubles();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setTriples();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setHomeRuns();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setRuns();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setRBI();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setWalks();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setStrikeOuts();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setHBP();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setStolenBases();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setCaughtStealing();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setTotalBases();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));

			intputFromBinary = hitter->setPoints();
			fin.write(reinterpret_cast<char*>(&intputFromBinary), sizeof(intputFromBinary));
		}

	}


}